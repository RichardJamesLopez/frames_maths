"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// src/getFrameHtml.ts
var getFrameHtml_exports = {};
__export(getFrameHtml_exports, {
  getFrameHtml: () => getFrameHtml,
  getFrameHtmlHead: () => getFrameHtmlHead
});
module.exports = __toCommonJS(getFrameHtml_exports);
function getFrameHtml(frame, options = {}) {
  const html = `<!DOCTYPE html>
  <html>
    <head>
      <title>${options.title ?? "frame"}</title>
      ${options.og?.title ? `<meta property="og:title" content="${options.og.title}"/>` : ""}
      ${getFrameHtmlHead(frame)}
      ${options.htmlHead || ""}
    </head>
    <body>${options.htmlBody ? options.htmlBody : ""}</body>
  </html>`;
  return html;
}
function getFrameHtmlHead(frame) {
  const tags = [
    `<meta name="og:image" content="${frame.ogImage || frame.image}"/>`,
    `<meta name="fc:frame" content="${frame.version}"/>`,
    `<meta name="fc:frame:image" content="${frame.image}"/>`,
    `<meta name="fc:frame:post_url" content="${frame.postUrl}"/>`,
    frame.imageAspectRatio ? `<meta name="fc:frame:image:aspect_ratio" content="${frame.imageAspectRatio}"/>` : "",
    frame.inputText ? `<meta name="fc:frame:input:text" content="${frame.inputText}"/>` : "",
    ...frame.buttons?.flatMap((button, index) => [
      `<meta name="fc:frame:button:${index + 1}" content="${button.label}"/>`,
      button.action ? `<meta name="fc:frame:button:${index + 1}:action" content="${button.action}"/>` : "",
      button.target ? `<meta name="fc:frame:button:${index + 1}:target" content="${button.target}"/>` : ""
    ]) ?? []
  ];
  return tags.join("");
}
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  getFrameHtml,
  getFrameHtmlHead
});
