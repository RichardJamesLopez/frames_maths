"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// src/utils.ts
var utils_exports = {};
__export(utils_exports, {
  bytesToHexString: () => bytesToHexString,
  getByteLength: () => getByteLength,
  getFrameMessageFromRequestBody: () => getFrameMessageFromRequestBody,
  hexStringToUint8Array: () => hexStringToUint8Array,
  isFrameButtonLink: () => isFrameButtonLink,
  isFrameButtonMint: () => isFrameButtonMint,
  isValidVersion: () => isValidVersion,
  normalizeCastId: () => normalizeCastId
});
module.exports = __toCommonJS(utils_exports);
var import_core = require("@farcaster/core");
function isFrameButtonLink(frameButton) {
  return frameButton.action === "link";
}
function isFrameButtonMint(frameButton) {
  return frameButton.action === "mint";
}
function bytesToHexString(bytes) {
  return "0x" + Buffer.from(bytes).toString("hex");
}
function getByteLength(str) {
  return Buffer.from(str).byteLength;
}
function hexStringToUint8Array(hexstring) {
  return new Uint8Array(
    hexstring.match(/.{1,2}/g).map((byte) => parseInt(byte, 16))
  );
}
function normalizeCastId(castId) {
  return {
    fid: castId.fid,
    hash: bytesToHexString(castId.hash)
  };
}
function getFrameMessageFromRequestBody(body) {
  return import_core.Message.decode(
    Buffer.from(body?.trustedData?.messageBytes ?? "", "hex")
  );
}
function isValidVersion(version) {
  if (version === "vNext") {
    return true;
  }
  const pattern = /^\d{4}-\d{2}-\d{2}$/;
  if (!pattern.test(version)) {
    return false;
  }
  return true;
}
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  bytesToHexString,
  getByteLength,
  getFrameMessageFromRequestBody,
  hexStringToUint8Array,
  isFrameButtonLink,
  isFrameButtonMint,
  isValidVersion,
  normalizeCastId
});
