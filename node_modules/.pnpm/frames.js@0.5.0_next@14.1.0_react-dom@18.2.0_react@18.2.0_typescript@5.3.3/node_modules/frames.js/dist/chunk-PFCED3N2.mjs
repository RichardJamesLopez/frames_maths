import {
  hexStringToUint8Array,
  normalizeCastId
} from "./chunk-IGI6BEMW.mjs";
import {
  getAddressForFid
} from "./chunk-SQTCOFIS.mjs";

// src/getUserDataForFid.ts
import { MessageType, UserDataType, Message } from "@farcaster/core";
async function getUserDataForFid({
  fid,
  options = {}
}) {
  const optionsOrDefaults = {
    hubHttpUrl: options.hubHttpUrl ?? "https://nemes.farcaster.xyz:2281"
  };
  const userDataResponse = await fetch(
    `${optionsOrDefaults.hubHttpUrl}/v1/userDataByFid?fid=${fid}`
  );
  const { messages } = await userDataResponse.json();
  if (messages && messages.length > 0) {
    const valuesByType = messages.reduce((acc, messageJson) => {
      const message = Message.fromJSON(messageJson);
      if (message.data?.type !== MessageType.USER_DATA_ADD) {
        return;
      }
      const timestamp = message.data.timestamp;
      const { type, value } = message.data.userDataBody;
      if (!acc[type]) {
        acc[type] = { value, timestamp };
      } else if (message.data.timestamp > acc[type].timestamp) {
        acc[type] = { value, timestamp };
      }
      return acc;
    }, {});
    return {
      profileImage: valuesByType[UserDataType.PFP]?.value,
      displayName: valuesByType[UserDataType.DISPLAY]?.value,
      username: valuesByType[UserDataType.USERNAME]?.value,
      bio: valuesByType[UserDataType.BIO]?.value
    };
  } else {
    return null;
  }
}

// src/getFrameMessage.ts
import { Message as Message2 } from "@farcaster/core";
async function getFrameMessage(payload, options) {
  const optionsOrDefaults = {
    fetchHubContext: options?.fetchHubContext ?? true,
    hubHttpUrl: options?.hubHttpUrl || "https://nemes.farcaster.xyz:2281"
  };
  const decodedMessage = Message2.decode(
    Buffer.from(payload.trustedData.messageBytes, "hex")
  );
  const { buttonIndex, inputText: inputTextBytes } = decodedMessage.data.frameActionBody || {};
  const inputText = inputTextBytes ? Buffer.from(inputTextBytes).toString("utf-8") : void 0;
  const requesterFid = decodedMessage.data.fid;
  const castId = decodedMessage.data.frameActionBody.castId ? normalizeCastId(decodedMessage.data.frameActionBody.castId) : void 0;
  const parsedData = {
    buttonIndex,
    castId,
    inputText,
    requesterFid
  };
  if (optionsOrDefaults?.fetchHubContext) {
    const [
      validationResult,
      requesterFollowsCaster,
      casterFollowsRequester,
      likedCast,
      recastedCast,
      requesterVerifiedAddresses,
      requesterUserData
    ] = await Promise.all([
      validateFrameMessage(payload, {
        hubHttpUrl: optionsOrDefaults.hubHttpUrl
      }),
      fetch(
        `${optionsOrDefaults.hubHttpUrl}/v1/linkById?fid=${requesterFid}&target_fid=${castId?.fid}&link_type=follow`
      ).then((res) => res.ok || requesterFid === castId?.fid),
      fetch(
        `${optionsOrDefaults.hubHttpUrl}/v1/linkById?fid=${castId?.fid}&target_fid=${requesterFid}&link_type=follow`
      ).then((res) => res.ok || requesterFid === castId?.fid),
      fetch(
        `${optionsOrDefaults.hubHttpUrl}/v1/reactionById?fid=${requesterFid}&reaction_type=1&target_fid=${castId?.fid}&target_hash=${castId?.hash}`
      ).then((res) => res.ok),
      fetch(
        `${optionsOrDefaults.hubHttpUrl}/v1/reactionById?fid=${requesterFid}&reaction_type=2&target_fid=${castId?.fid}&target_hash=${castId?.hash}`
      ).then((res) => res.ok),
      getAddressForFid({
        fid: requesterFid,
        options: {
          hubHttpUrl: optionsOrDefaults.hubHttpUrl
        }
      }),
      getUserDataForFid({
        fid: requesterFid,
        options: {
          hubHttpUrl: optionsOrDefaults.hubHttpUrl
        }
      })
    ]);
    const hubContext = {
      isValid: validationResult.isValid,
      casterFollowsRequester,
      requesterFollowsCaster,
      likedCast,
      recastedCast,
      requesterVerifiedAddresses: requesterVerifiedAddresses ? [requesterVerifiedAddresses] : [],
      requesterUserData
    };
    return { ...parsedData, ...hubContext };
  } else {
    return parsedData;
  }
}

// src/validateFrameMessage.ts
import { Message as Message3 } from "@farcaster/core";
async function validateFrameMessage(body, options) {
  const optionsOrDefaults = {
    hubHttpUrl: options?.hubHttpUrl || "https://nemes.farcaster.xyz:2281"
  };
  const validateMessageResponse = await fetch(
    `${optionsOrDefaults.hubHttpUrl}/v1/validateMessage`,
    {
      method: "POST",
      headers: {
        "Content-Type": "application/octet-stream"
      },
      body: hexStringToUint8Array(body.trustedData.messageBytes)
    }
  );
  const validateMessageJson = await validateMessageResponse.json();
  if (!validateMessageJson.valid) {
    return {
      isValid: false,
      message: void 0
    };
  } else {
    return {
      isValid: true,
      message: Message3.fromJSON(
        validateMessageJson.message
      )
    };
  }
}

export {
  getUserDataForFid,
  validateFrameMessage,
  getFrameMessage
};
