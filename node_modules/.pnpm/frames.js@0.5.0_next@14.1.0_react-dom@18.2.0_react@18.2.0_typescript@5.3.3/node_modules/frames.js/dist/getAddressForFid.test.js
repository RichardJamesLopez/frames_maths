"use strict";
var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));

// src/getAddressForFid.ts
var import_viem = require("viem");
var import_chains = require("viem/chains");
async function getAddressForFid({
  fid,
  options = {}
}) {
  const {
    fallbackToCustodyAddress = true,
    hubHttpUrl = "https://api.neynar.com:2281",
    hubRequestOptions = {
      headers: {
        api_key: "NEYNAR_FRAMES_JS"
      }
    }
  } = options;
  const verificationsResponse = await fetch(
    `${hubHttpUrl}/v1/verificationsByFid?fid=${fid}`,
    hubRequestOptions
  );
  const { messages } = await verificationsResponse.json();
  if (messages[0]) {
    const {
      data: {
        verificationAddEthAddressBody: { address }
      }
    } = messages[0];
    return address;
  } else if (fallbackToCustodyAddress) {
    const publicClient = (0, import_viem.createPublicClient)({
      transport: (0, import_viem.http)(),
      chain: import_chains.optimism
    });
    const address = await publicClient.readContract({
      abi: (0, import_viem.parseAbi)(["function custodyOf(uint256 fid) view returns (address)"]),
      // IdRegistry contract address
      address: "0x00000000fc6c5f01fc30151999387bb99a9f489b",
      functionName: "custodyOf",
      args: [BigInt(fid)]
    });
    return address;
  } else {
    return null;
  }
}

// src/getUserDataForFid.ts
var import_core = require("@farcaster/core");

// src/validateFrame.ts
var cheerio = __toESM(require("cheerio"));

// src/utils.ts
var import_core2 = require("@farcaster/core");

// src/validateFrameMessage.ts
var import_core3 = require("@farcaster/core");

// src/getFrameMessage.ts
var import_core4 = require("@farcaster/core");

// src/getAddressForFid.test.ts
describe("getAddressForFid", () => {
  it("should get address for fid with connected address", async () => {
    const fid = 1689;
    const address = await getAddressForFid({ fid });
    expect(address).not.toBe(null);
  });
  it("should return null for fid without connected address", async () => {
    const fid = 1;
    const address = await getAddressForFid({ fid });
    expect(address).not.toBe(null);
  });
  it("should fall back to custody address if specified", async () => {
    const fid = 1;
    const address = await getAddressForFid({
      fid,
      options: { fallbackToCustodyAddress: true }
    });
    expect(address).not.toBe(null);
  });
});
