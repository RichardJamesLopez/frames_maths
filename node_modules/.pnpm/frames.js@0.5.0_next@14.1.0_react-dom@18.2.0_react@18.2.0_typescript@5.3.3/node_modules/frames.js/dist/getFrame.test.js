"use strict";
var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));

// src/validateFrame.ts
var cheerio = __toESM(require("cheerio"));

// src/utils.ts
var import_core = require("@farcaster/core");
function isFrameButtonLink(frameButton) {
  return frameButton.action === "link";
}
function isFrameButtonMint(frameButton) {
  return frameButton.action === "mint";
}
function getByteLength(str) {
  return Buffer.from(str).byteLength;
}
function isValidVersion(version) {
  if (version === "vNext") {
    return true;
  }
  const pattern = /^\d{4}-\d{2}-\d{2}$/;
  if (!pattern.test(version)) {
    return false;
  }
  return true;
}

// src/getAddressForFid.ts
var import_viem = require("viem");
var import_chains = require("viem/chains");

// src/getUserDataForFid.ts
var import_core2 = require("@farcaster/core");

// src/getFrameHtml.ts
function getFrameHtml(frame, options = {}) {
  const html = `<!DOCTYPE html>
  <html>
    <head>
      <title>${options.title ?? "frame"}</title>
      ${options.og?.title ? `<meta property="og:title" content="${options.og.title}"/>` : ""}
      ${getFrameHtmlHead(frame)}
      ${options.htmlHead || ""}
    </head>
    <body>${options.htmlBody ? options.htmlBody : ""}</body>
  </html>`;
  return html;
}
function getFrameHtmlHead(frame) {
  const tags = [
    `<meta name="og:image" content="${frame.ogImage || frame.image}"/>`,
    `<meta name="fc:frame" content="${frame.version}"/>`,
    `<meta name="fc:frame:image" content="${frame.image}"/>`,
    `<meta name="fc:frame:post_url" content="${frame.postUrl}"/>`,
    frame.imageAspectRatio ? `<meta name="fc:frame:image:aspect_ratio" content="${frame.imageAspectRatio}"/>` : "",
    frame.inputText ? `<meta name="fc:frame:input:text" content="${frame.inputText}"/>` : "",
    ...frame.buttons?.flatMap((button, index) => [
      `<meta name="fc:frame:button:${index + 1}" content="${button.label}"/>`,
      button.action ? `<meta name="fc:frame:button:${index + 1}:action" content="${button.action}"/>` : "",
      button.target ? `<meta name="fc:frame:button:${index + 1}:target" content="${button.target}"/>` : ""
    ]) ?? []
  ];
  return tags.join("");
}

// src/validateFrameMessage.ts
var import_core3 = require("@farcaster/core");

// src/getFrameMessage.ts
var import_core4 = require("@farcaster/core");

// src/getTokenFromUrl.ts
function getTokenFromUrl(url) {
  const [namespace, chainId, address, tokenId] = url.split(":");
  if (!namespace || !chainId || !address) {
    throw new Error("Invalid token URL");
  }
  return {
    namespace,
    chainId: parseInt(chainId),
    address,
    tokenId: tokenId || void 0
  };
}

// src/validateFrame.ts
function validateFrame({
  htmlString,
  url
}) {
  const $ = cheerio.load(htmlString);
  let errors = null;
  function addError({ key, message }) {
    if (!errors)
      errors = {};
    if (errors.hasOwnProperty(key) && errors[key] && Array.isArray(errors[key])) {
      console.log(`Error: ${key} ${message}`);
      errors[key].push(message);
    } else {
      errors[key] = [message];
    }
  }
  const pageTitle = $("title").text();
  if (pageTitle === void 0) {
    addError({
      message: `A <title> tag is required in order for your frames to work in Warpcast`,
      key: `<title>`
    });
  }
  const version = $("meta[property='fc:frame'], meta[name='fc:frame']").attr(
    "content"
  );
  const image = $(
    "meta[property='fc:frame:image'], meta[name='fc:frame:image']"
  ).attr("content");
  const imageAspectRatio = $(
    "meta[property='fc:frame:image:aspect_ratio'], meta[name='fc:frame:image:aspect_ratio']"
  ).attr("content");
  const postUrl = $(
    "meta[property='fc:frame:post_url'], meta[name='fc:frame:post_url']"
  ).attr("content") || url;
  const inputText = $(
    "meta[property='fc:frame:input:text'], meta[name='fc:frame:input:text']"
  ).attr("content");
  const buttonLabels = [1, 2, 3, 4].flatMap(
    (el) => $(
      `meta[property='fc:frame:button:${el}'], meta[name='fc:frame:button:${el}']`
    ).map((i, elem) => parseButtonElement(elem)).filter((i, elem) => elem !== null).toArray()
  );
  const buttonActions = [1, 2, 3, 4].flatMap(
    (el) => $(
      `meta[property='fc:frame:button:${el}:action'], meta[name='fc:frame:button:${el}:action']`
    ).map((i, elem) => parseButtonElement(elem)).filter((i, elem) => elem !== null).toArray()
  );
  const buttonTargets = [1, 2, 3, 4].flatMap(
    (el) => $(
      `meta[property='fc:frame:button:${el}:target'], meta[name='fc:frame:button:${el}:target']`
    ).map((i, elem) => parseButtonElement(elem)).filter((i, elem) => elem !== null).toArray()
  );
  let buttonsValidation = [false, false, false, false];
  const buttonsWithActions = buttonLabels.map((buttonLabel) => {
    const buttonAction = buttonActions.find(
      (action2) => action2?.buttonIndex === buttonLabel?.buttonIndex
    );
    const buttonTarget = buttonTargets.find(
      (action2) => action2?.buttonIndex === buttonLabel?.buttonIndex
    );
    if (buttonsValidation[buttonLabel.buttonIndex - 1]) {
      addError({
        message: "Duplicate button",
        key: `fc:frame:button:${buttonLabel.buttonIndex}`
      });
    }
    if (![1, 2, 3, 4].includes(buttonLabel.buttonIndex)) {
      addError({
        message: "Incorrect button index (outside of 1,2,3,4)",
        key: `fc:frame:button:${buttonLabel.buttonIndex}`
      });
    } else {
      buttonsValidation[buttonLabel.buttonIndex - 1] = true;
    }
    const action = buttonAction?.content !== void 0 ? buttonAction?.content : "post";
    if (action === "link") {
      if (!buttonTarget?.content) {
        addError({
          message: "No button target, but required for action type link",
          key: `fc:frame:button:${buttonLabel.buttonIndex}`
        });
      }
      if (!(buttonTarget?.content?.startsWith("http://") || buttonTarget?.content?.startsWith("https://"))) {
        addError({
          message: "External links MUST use the https://  or http:// protocols. ",
          key: `fc:frame:button:${buttonLabel.buttonIndex}`
        });
      }
    }
    if (!buttonTarget?.content && ["link", "mint"].includes(action)) {
      addError({
        message: `Button target is required for action type ${action}`,
        key: `fc:frame:button:${buttonLabel.buttonIndex}`
      });
    }
    if (buttonTarget?.content && !buttonAction) {
      addError({
        message: "Missing button action (should be 'mint' or 'link')",
        key: `fc:frame:button:${buttonLabel.buttonIndex}`
      });
    }
    if (!["post_redirect", "post", "mint", "link", void 0].includes(
      buttonAction?.content
    )) {
      addError({
        message: "Invalid button action specified",
        key: `fc:frame:button:${buttonLabel.buttonIndex}`
      });
    }
    if (action === "mint" && buttonTarget?.content) {
      try {
        getTokenFromUrl(buttonTarget.content);
      } catch (error) {
        addError({
          message: "Invalid CAIP-10 URL",
          key: `fc:frame:button:${buttonLabel.buttonIndex}`
        });
      }
    }
    return {
      buttonIndex: buttonLabel.buttonIndex,
      label: buttonLabel.content || "",
      target: buttonTarget?.content,
      // this is an optional property, falls back to "post"
      action: buttonAction?.content || "post"
    };
  }).sort((a, b) => a.buttonIndex - b.buttonIndex).map((button) => {
    if (isFrameButtonLink(button) || isFrameButtonMint(button))
      return {
        label: button.label,
        action: button.action,
        target: button.target
      };
    return {
      label: button.label,
      action: button.action,
      target: button.target
    };
  });
  if (buttonsValidation.some((x, i) => !x && i < 3 && buttonsValidation[i + 1])) {
    addError({
      message: `Gap in buttons sequence, ${buttonsValidation.map((el, i) => `${el ? i + 1 : ""}`).join(",")}`,
      key: `fc:frame:button:1`
    });
  }
  if (!version) {
    addError({ message: "No version found in frame", key: "fc:frame" });
  } else if (!isValidVersion(version))
    addError({
      message: "Invalid version",
      key: "fc:frame"
    });
  if (!image) {
    addError({ message: "No image found in frame", key: "fc:frame:image" });
  } else if (!(image?.startsWith("http://") || image?.startsWith("https://"))) {
    if (!(image?.startsWith("data:image/png;base64,") || image?.startsWith("data:image/jpg;base64,") || image?.startsWith("data:image/jpeg;base64,") || image?.startsWith("data:image/gif;base64,"))) {
      addError({
        message: "Image has an unrecognized format. Only jpg, png and gif images are supported",
        key: "fc:frame:image"
      });
    }
  }
  if (imageAspectRatio && imageAspectRatio !== "1.91:1" && imageAspectRatio !== "1:1") {
    addError({
      message: "Invalid image aspect ratio",
      key: "fc:frame:image:aspect_ratio"
    });
  }
  if (!postUrl) {
    addError({
      message: "No post_url in frame",
      key: "fc:frame:post_url"
    });
  }
  if (getByteLength(postUrl) > 256) {
    addError({
      message: "post_url is more than 256 bytes (frames.js generates a longer post_url including system params)",
      key: "fc:frame:post_url"
    });
  }
  if (buttonsWithActions.length > 4)
    addError({ message: "Too many buttons", key: "fc:frame:button" });
  if (inputText && getByteLength(inputText) > 32) {
    addError({
      message: "Input text should be max 32 bytes",
      key: "fc:frame:input:text"
    });
  }
  return {
    frame: {
      version,
      image,
      imageAspectRatio,
      buttons: buttonsWithActions,
      postUrl,
      inputText
    },
    errors
  };
}
function parseButtonElement(elem) {
  const nameAttr = elem.attribs["name"] || elem.attribs["property"];
  const buttonIndex = nameAttr?.split(":")[3];
  try {
    return {
      buttonIndex: parseInt(buttonIndex || ""),
      content: elem.attribs["content"]
    };
  } catch (error) {
    return null;
  }
}

// src/getFrame.ts
function getFrame({
  htmlString,
  url
}) {
  return validateFrame({ htmlString, url });
}

// src/getFrame.test.ts
describe("getFrame", () => {
  const sampleHtml = `
  <meta property="fc:frame" content="vNext" />
  <meta property="fc:frame:image" content="http:/example.com/image.png" />
  <meta property="fc:frame:button:1" content="Green" />
  <meta property="fc:frame:button:2" content="Purple" />
  <meta property="fc:frame:button:3" content="Red" />
  <meta property="fc:frame:button:4" content="Blue" />
  <meta property="fc:frame:post_url" content="https://example.com" />
  <meta property="fc:frame:input:text" content="Enter a message" />
`;
  const sampleFrame = {
    version: "vNext",
    image: "http:/example.com/image.png",
    buttons: [
      {
        label: "Green",
        action: "post"
      },
      {
        label: "Purple",
        action: "post"
      },
      {
        label: "Red",
        action: "post"
      },
      {
        label: "Blue",
        action: "post"
      }
    ],
    postUrl: "https://example.com",
    inputText: "Enter a message"
  };
  it("should parse html meta tags", () => {
    const htmlName = `
    <meta name="fc:frame" content="vNext" />
    <meta name="fc:frame:image" content="http:/example.com/image.png" />
    <meta name="fc:frame:button:1" content="Green" />
    <meta name="fc:frame:button:2" content="Purple" />
    <meta name="fc:frame:button:3" content="Red" />
    <meta name="fc:frame:button:4" content="Blue" />
    <meta name="fc:frame:post_url" content="https://example.com" />
    <meta name="fc:frame:input:text" content="Enter a message" />
  `;
    expect(
      getFrame({
        htmlString: sampleHtml,
        url: "https://example.com"
      }).frame
    ).toEqual(sampleFrame);
    expect(
      getFrame({
        htmlString: htmlName,
        url: "https://example.com"
      }).frame
    ).toEqual(sampleFrame);
  });
  it("should parse button actions", () => {
    const html = `
    <meta name="fc:frame" content="vNext"/>
    <meta name="fc:frame:post_url" content="https://example.com"/>
    <meta name="fc:frame:image" content="http:/example.com/image.png"/>
    <meta name="fc:frame:button:1" content="1"/>
    <meta name="fc:frame:button:2" content="2"/>
    <meta name="fc:frame:button:2:action" content="post_redirect"/>
    <meta name="fc:frame:button:3" content="3" />
    <meta name="fc:frame:button:3:action" content="link" />
    <meta name="fc:frame:button:3:target" content="https://example.com" />
    <meta name="fc:frame:button:4" content="Mint" />
    <meta name="fc:frame:button:4:action" content="mint" />
    <meta name="fc:frame:button:4:target" content="eip155:7777777:0x060f3edd18c47f59bd23d063bbeb9aa4a8fec6df" />
    `;
    const { frame } = getFrame({
      htmlString: html,
      url: "https://example.com"
    });
    expect(frame).toEqual({
      version: "vNext",
      image: "http:/example.com/image.png",
      buttons: [
        {
          label: "1",
          action: "post",
          target: void 0
        },
        {
          label: "2",
          action: "post_redirect",
          target: void 0
        },
        {
          label: "3",
          action: "link",
          target: "https://example.com"
        },
        {
          label: "Mint",
          action: "mint",
          target: "eip155:7777777:0x060f3edd18c47f59bd23d063bbeb9aa4a8fec6df"
        }
      ],
      postUrl: "https://example.com"
    });
  });
  it("should accept valid aspect ratio", () => {
    const html = `
    <meta name="fc:frame" content="vNext"/>
    <meta name="fc:frame:post_url" content="https://example.com"/>
    <meta name="fc:frame:image" content="http:/example.com/image.png"/>
    <meta name="fc:frame:image:aspect_ratio" content="1:91"/>
    `;
    const { frame } = getFrame({
      htmlString: html,
      url: "https://example.com"
    });
    expect(frame?.imageAspectRatio).toEqual("1:91");
    const html2 = `
    <meta name="fc:frame" content="vNext"/>
    <meta name="fc:frame:post_url" content="https://example.com"/>
    <meta name="fc:frame:image" content="http:/example.com/image.png"/>
    <meta name="fc:frame:image:aspect_ratio" content="1:1"/>
    `;
    const { frame: frame2 } = getFrame({
      htmlString: html2,
      url: "https://example.com"
    });
    expect(frame2?.imageAspectRatio).toEqual("1:1");
  });
  it("should reject invalid aspect ratio", () => {
    const html = `
    <meta name="fc:frame" content="vNext"/>
    <meta name="fc:frame:post_url" content="https://example.com"/>
    <meta name="fc:frame:image" content="http://example.com/image.png"/>
    <meta name="fc:frame:image:aspect_ratio" content="1:2"/>
    `;
    const { errors } = getFrame({
      htmlString: html,
      url: "https://example.com"
    });
    expect(errors?.["fc:frame:image:aspect_ratio"]).toEqual([
      "Invalid image aspect ratio"
    ]);
  });
  it("should convert a Farcaster Frame HTML into a Frame object", () => {
    const exampleFrame = {
      version: "vNext",
      image: "http:/example.com/image.png",
      buttons: [
        {
          label: "1",
          action: "post",
          target: void 0
        },
        {
          label: "2",
          action: "post_redirect",
          target: void 0
        },
        {
          label: "3",
          action: "link",
          target: "https://example.com"
        },
        {
          label: "Mint",
          action: "mint",
          target: "eip155:7777777:0x060f3edd18c47f59bd23d063bbeb9aa4a8fec6df"
        }
      ],
      postUrl: "https://example.com"
    };
    const html = getFrameHtml(exampleFrame);
    const parsedFrame = getFrame({
      htmlString: html,
      url: "https://example.com"
    }).frame;
    expect(parsedFrame).toEqual(exampleFrame);
  });
});
