"use strict";
var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));

// src/getAddressForFid.ts
var import_viem = require("viem");
var import_chains = require("viem/chains");

// src/getUserDataForFid.ts
var import_core = require("@farcaster/core");

// src/validateFrame.ts
var cheerio = __toESM(require("cheerio"));

// src/utils.ts
var import_core2 = require("@farcaster/core");

// src/validateFrameMessage.ts
var import_core3 = require("@farcaster/core");

// src/getFrameMessage.ts
var import_core4 = require("@farcaster/core");

// src/getTokenFromUrl.ts
function getTokenFromUrl(url) {
  const [namespace, chainId, address, tokenId] = url.split(":");
  if (!namespace || !chainId || !address) {
    throw new Error("Invalid token URL");
  }
  return {
    namespace,
    chainId: parseInt(chainId),
    address,
    tokenId: tokenId || void 0
  };
}

// src/getTokenFromUrl.test.ts
describe("getTokenFromUrl", () => {
  it("should get the token from the token url", async () => {
    expect(
      getTokenFromUrl(
        "eip155:7777777:0x060f3edd18c47f59bd23d063bbeb9aa4a8fec6df:123"
      )
    ).toEqual({
      namespace: "eip155",
      chainId: 7777777,
      address: "0x060f3edd18c47f59bd23d063bbeb9aa4a8fec6df",
      tokenId: "123"
    });
  });
  it("throws for invalid url", async () => {
    expect(() => getTokenFromUrl("a")).toThrow("Invalid token URL");
  });
});
