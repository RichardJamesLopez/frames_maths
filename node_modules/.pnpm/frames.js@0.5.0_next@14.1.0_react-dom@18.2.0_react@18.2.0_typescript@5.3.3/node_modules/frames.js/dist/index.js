"use strict";
var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// src/index.ts
var src_exports = {};
__export(src_exports, {
  bytesToHexString: () => bytesToHexString,
  frameErrorKeys: () => frameErrorKeys,
  getAddressForFid: () => getAddressForFid,
  getByteLength: () => getByteLength,
  getFrame: () => getFrame,
  getFrameFlattened: () => getFrameFlattened,
  getFrameHtml: () => getFrameHtml,
  getFrameHtmlHead: () => getFrameHtmlHead,
  getFrameMessage: () => getFrameMessage,
  getFrameMessageFromRequestBody: () => getFrameMessageFromRequestBody,
  getTokenFromUrl: () => getTokenFromUrl,
  getTokenUrl: () => getTokenUrl,
  getUserDataForFid: () => getUserDataForFid,
  hexStringToUint8Array: () => hexStringToUint8Array,
  isFrameButtonLink: () => isFrameButtonLink,
  isFrameButtonMint: () => isFrameButtonMint,
  isValidVersion: () => isValidVersion,
  normalizeCastId: () => normalizeCastId,
  parseButtonElement: () => parseButtonElement2,
  validateFrameMessage: () => validateFrameMessage
});
module.exports = __toCommonJS(src_exports);

// src/getAddressForFid.ts
var import_viem = require("viem");
var import_chains = require("viem/chains");
async function getAddressForFid({
  fid,
  options = {}
}) {
  const {
    fallbackToCustodyAddress = true,
    hubHttpUrl = "https://api.neynar.com:2281",
    hubRequestOptions = {
      headers: {
        api_key: "NEYNAR_FRAMES_JS"
      }
    }
  } = options;
  const verificationsResponse = await fetch(
    `${hubHttpUrl}/v1/verificationsByFid?fid=${fid}`,
    hubRequestOptions
  );
  const { messages } = await verificationsResponse.json();
  if (messages[0]) {
    const {
      data: {
        verificationAddEthAddressBody: { address }
      }
    } = messages[0];
    return address;
  } else if (fallbackToCustodyAddress) {
    const publicClient = (0, import_viem.createPublicClient)({
      transport: (0, import_viem.http)(),
      chain: import_chains.optimism
    });
    const address = await publicClient.readContract({
      abi: (0, import_viem.parseAbi)(["function custodyOf(uint256 fid) view returns (address)"]),
      // IdRegistry contract address
      address: "0x00000000fc6c5f01fc30151999387bb99a9f489b",
      functionName: "custodyOf",
      args: [BigInt(fid)]
    });
    return address;
  } else {
    return null;
  }
}

// src/getUserDataForFid.ts
var import_core = require("@farcaster/core");
async function getUserDataForFid({
  fid,
  options = {}
}) {
  const {
    hubHttpUrl = "https://api.neynar.com:2281",
    hubRequestOptions = {
      headers: {
        api_key: "NEYNAR_FRAMES_JS"
      }
    }
  } = options;
  const userDataResponse = await fetch(
    `${hubHttpUrl}/v1/userDataByFid?fid=${fid}`,
    hubRequestOptions
  );
  const { messages } = await userDataResponse.json();
  if (messages && messages.length > 0) {
    const valuesByType = messages.reduce((acc, messageJson) => {
      const message = import_core.Message.fromJSON(messageJson);
      if (message.data?.type !== import_core.MessageType.USER_DATA_ADD) {
        return;
      }
      const timestamp = message.data.timestamp;
      const { type, value } = message.data.userDataBody;
      if (!acc[type]) {
        acc[type] = { value, timestamp };
      } else if (message.data.timestamp > acc[type].timestamp) {
        acc[type] = { value, timestamp };
      }
      return acc;
    }, {});
    return {
      profileImage: valuesByType[import_core.UserDataType.PFP]?.value,
      displayName: valuesByType[import_core.UserDataType.DISPLAY]?.value,
      username: valuesByType[import_core.UserDataType.USERNAME]?.value,
      bio: valuesByType[import_core.UserDataType.BIO]?.value
    };
  } else {
    return null;
  }
}

// src/validateFrame.ts
var cheerio = __toESM(require("cheerio"));

// src/utils.ts
var import_core2 = require("@farcaster/core");
function isFrameButtonLink(frameButton) {
  return frameButton.action === "link";
}
function isFrameButtonMint(frameButton) {
  return frameButton.action === "mint";
}
function bytesToHexString(bytes) {
  return "0x" + Buffer.from(bytes).toString("hex");
}
function getByteLength(str) {
  return Buffer.from(str).byteLength;
}
function hexStringToUint8Array(hexstring) {
  return new Uint8Array(
    hexstring.match(/.{1,2}/g).map((byte) => parseInt(byte, 16))
  );
}
function normalizeCastId(castId) {
  return {
    fid: castId.fid,
    hash: bytesToHexString(castId.hash)
  };
}
function getFrameMessageFromRequestBody(body) {
  return import_core2.Message.decode(
    Buffer.from(body?.trustedData?.messageBytes ?? "", "hex")
  );
}
function isValidVersion(version) {
  if (version === "vNext") {
    return true;
  }
  const pattern = /^\d{4}-\d{2}-\d{2}$/;
  if (!pattern.test(version)) {
    return false;
  }
  return true;
}

// src/validateFrame.ts
function validateFrame({
  htmlString,
  url
}) {
  const $ = cheerio.load(htmlString);
  let errors = null;
  function addError({ key, message }) {
    if (!errors)
      errors = {};
    if (errors.hasOwnProperty(key) && errors[key] && Array.isArray(errors[key])) {
      console.log(`Error: ${key} ${message}`);
      errors[key].push(message);
    } else {
      errors[key] = [message];
    }
  }
  const pageTitle = $("title").text();
  if (pageTitle === void 0) {
    addError({
      message: `A <title> tag is required in order for your frames to work in Warpcast`,
      key: `<title>`
    });
  }
  const version = $("meta[property='fc:frame'], meta[name='fc:frame']").attr(
    "content"
  );
  const image = $(
    "meta[property='fc:frame:image'], meta[name='fc:frame:image']"
  ).attr("content");
  const imageAspectRatio = $(
    "meta[property='fc:frame:image:aspect_ratio'], meta[name='fc:frame:image:aspect_ratio']"
  ).attr("content");
  const postUrl = $(
    "meta[property='fc:frame:post_url'], meta[name='fc:frame:post_url']"
  ).attr("content") || url;
  const inputText = $(
    "meta[property='fc:frame:input:text'], meta[name='fc:frame:input:text']"
  ).attr("content");
  const buttonLabels = [1, 2, 3, 4].flatMap(
    (el) => $(
      `meta[property='fc:frame:button:${el}'], meta[name='fc:frame:button:${el}']`
    ).map((i, elem) => parseButtonElement(elem)).filter((i, elem) => elem !== null).toArray()
  );
  const buttonActions = [1, 2, 3, 4].flatMap(
    (el) => $(
      `meta[property='fc:frame:button:${el}:action'], meta[name='fc:frame:button:${el}:action']`
    ).map((i, elem) => parseButtonElement(elem)).filter((i, elem) => elem !== null).toArray()
  );
  const buttonTargets = [1, 2, 3, 4].flatMap(
    (el) => $(
      `meta[property='fc:frame:button:${el}:target'], meta[name='fc:frame:button:${el}:target']`
    ).map((i, elem) => parseButtonElement(elem)).filter((i, elem) => elem !== null).toArray()
  );
  let buttonsValidation = [false, false, false, false];
  const buttonsWithActions = buttonLabels.map((buttonLabel) => {
    const buttonAction = buttonActions.find(
      (action2) => action2?.buttonIndex === buttonLabel?.buttonIndex
    );
    const buttonTarget = buttonTargets.find(
      (action2) => action2?.buttonIndex === buttonLabel?.buttonIndex
    );
    if (buttonsValidation[buttonLabel.buttonIndex - 1]) {
      addError({
        message: "Duplicate button",
        key: `fc:frame:button:${buttonLabel.buttonIndex}`
      });
    }
    if (![1, 2, 3, 4].includes(buttonLabel.buttonIndex)) {
      addError({
        message: "Incorrect button index (outside of 1,2,3,4)",
        key: `fc:frame:button:${buttonLabel.buttonIndex}`
      });
    } else {
      buttonsValidation[buttonLabel.buttonIndex - 1] = true;
    }
    const action = buttonAction?.content !== void 0 ? buttonAction?.content : "post";
    if (action === "link") {
      if (!buttonTarget?.content) {
        addError({
          message: "No button target, but required for action type link",
          key: `fc:frame:button:${buttonLabel.buttonIndex}`
        });
      }
      if (!(buttonTarget?.content?.startsWith("http://") || buttonTarget?.content?.startsWith("https://"))) {
        addError({
          message: "External links MUST use the https://  or http:// protocols. ",
          key: `fc:frame:button:${buttonLabel.buttonIndex}`
        });
      }
    }
    if (!buttonTarget?.content && ["link", "mint"].includes(action)) {
      addError({
        message: `Button target is required for action type ${action}`,
        key: `fc:frame:button:${buttonLabel.buttonIndex}`
      });
    }
    if (buttonTarget?.content && !buttonAction) {
      addError({
        message: "Missing button action (should be 'mint' or 'link')",
        key: `fc:frame:button:${buttonLabel.buttonIndex}`
      });
    }
    if (!["post_redirect", "post", "mint", "link", void 0].includes(
      buttonAction?.content
    )) {
      addError({
        message: "Invalid button action specified",
        key: `fc:frame:button:${buttonLabel.buttonIndex}`
      });
    }
    if (action === "mint" && buttonTarget?.content) {
      try {
        getTokenFromUrl(buttonTarget.content);
      } catch (error) {
        addError({
          message: "Invalid CAIP-10 URL",
          key: `fc:frame:button:${buttonLabel.buttonIndex}`
        });
      }
    }
    return {
      buttonIndex: buttonLabel.buttonIndex,
      label: buttonLabel.content || "",
      target: buttonTarget?.content,
      // this is an optional property, falls back to "post"
      action: buttonAction?.content || "post"
    };
  }).sort((a, b) => a.buttonIndex - b.buttonIndex).map((button) => {
    if (isFrameButtonLink(button) || isFrameButtonMint(button))
      return {
        label: button.label,
        action: button.action,
        target: button.target
      };
    return {
      label: button.label,
      action: button.action,
      target: button.target
    };
  });
  if (buttonsValidation.some((x, i) => !x && i < 3 && buttonsValidation[i + 1])) {
    addError({
      message: `Gap in buttons sequence, ${buttonsValidation.map((el, i) => `${el ? i + 1 : ""}`).join(",")}`,
      key: `fc:frame:button:1`
    });
  }
  if (!version) {
    addError({ message: "No version found in frame", key: "fc:frame" });
  } else if (!isValidVersion(version))
    addError({
      message: "Invalid version",
      key: "fc:frame"
    });
  if (!image) {
    addError({ message: "No image found in frame", key: "fc:frame:image" });
  } else if (!(image?.startsWith("http://") || image?.startsWith("https://"))) {
    if (!(image?.startsWith("data:image/png;base64,") || image?.startsWith("data:image/jpg;base64,") || image?.startsWith("data:image/jpeg;base64,") || image?.startsWith("data:image/gif;base64,"))) {
      addError({
        message: "Image has an unrecognized format. Only jpg, png and gif images are supported",
        key: "fc:frame:image"
      });
    }
  }
  if (imageAspectRatio && imageAspectRatio !== "1.91:1" && imageAspectRatio !== "1:1") {
    addError({
      message: "Invalid image aspect ratio",
      key: "fc:frame:image:aspect_ratio"
    });
  }
  if (!postUrl) {
    addError({
      message: "No post_url in frame",
      key: "fc:frame:post_url"
    });
  }
  if (getByteLength(postUrl) > 256) {
    addError({
      message: "post_url is more than 256 bytes (frames.js generates a longer post_url including system params)",
      key: "fc:frame:post_url"
    });
  }
  if (buttonsWithActions.length > 4)
    addError({ message: "Too many buttons", key: "fc:frame:button" });
  if (inputText && getByteLength(inputText) > 32) {
    addError({
      message: "Input text should be max 32 bytes",
      key: "fc:frame:input:text"
    });
  }
  return {
    frame: {
      version,
      image,
      imageAspectRatio,
      buttons: buttonsWithActions,
      postUrl,
      inputText
    },
    errors
  };
}
function parseButtonElement(elem) {
  const nameAttr = elem.attribs["name"] || elem.attribs["property"];
  const buttonIndex = nameAttr?.split(":")[3];
  try {
    return {
      buttonIndex: parseInt(buttonIndex || ""),
      content: elem.attribs["content"]
    };
  } catch (error) {
    return null;
  }
}

// src/getFrame.ts
function getFrame({
  htmlString,
  url
}) {
  return validateFrame({ htmlString, url });
}
function parseButtonElement2(elem) {
  const nameAttr = elem.attribs["name"] || elem.attribs["property"];
  const buttonIndex = nameAttr?.split(":")[3];
  try {
    return {
      buttonIndex: parseInt(buttonIndex || ""),
      content: elem.attribs["content"]
    };
  } catch (error) {
    return null;
  }
}

// src/getFrameHtml.ts
function getFrameHtml(frame, options = {}) {
  const html = `<!DOCTYPE html>
  <html>
    <head>
      <title>${options.title ?? "frame"}</title>
      ${options.og?.title ? `<meta property="og:title" content="${options.og.title}"/>` : ""}
      ${getFrameHtmlHead(frame)}
      ${options.htmlHead || ""}
    </head>
    <body>${options.htmlBody ? options.htmlBody : ""}</body>
  </html>`;
  return html;
}
function getFrameHtmlHead(frame) {
  const tags = [
    `<meta name="og:image" content="${frame.ogImage || frame.image}"/>`,
    `<meta name="fc:frame" content="${frame.version}"/>`,
    `<meta name="fc:frame:image" content="${frame.image}"/>`,
    `<meta name="fc:frame:post_url" content="${frame.postUrl}"/>`,
    frame.imageAspectRatio ? `<meta name="fc:frame:image:aspect_ratio" content="${frame.imageAspectRatio}"/>` : "",
    frame.inputText ? `<meta name="fc:frame:input:text" content="${frame.inputText}"/>` : "",
    ...frame.buttons?.flatMap((button, index) => [
      `<meta name="fc:frame:button:${index + 1}" content="${button.label}"/>`,
      button.action ? `<meta name="fc:frame:button:${index + 1}:action" content="${button.action}"/>` : "",
      button.target ? `<meta name="fc:frame:button:${index + 1}:target" content="${button.target}"/>` : ""
    ]) ?? []
  ];
  return tags.join("");
}

// src/getFrameFlattened.ts
function getFrameFlattened(frame) {
  const metadata = {
    "fc:frame": frame.version,
    "fc:frame:image": frame.image,
    "fc:frame:post_url": frame.postUrl,
    "fc:frame:input:text": frame.inputText,
    ...frame.imageAspectRatio ? { [`fc:frame:image:aspect_ratio`]: frame.imageAspectRatio } : {},
    ...frame.buttons?.reduce(
      (acc, button, index) => ({
        ...acc,
        [`fc:frame:button:${index + 1}`]: button.label,
        [`fc:frame:button:${index + 1}:action`]: button.action,
        [`fc:frame:button:${index + 1}:target`]: button.target
      }),
      {}
    )
  };
  return metadata;
}

// src/types.ts
var frameErrorKeys = [
  "fc:frame",
  "fc:frame:image",
  "fc:frame:image:aspect_ratio",
  "fc:frame:post_url",
  "fc:frame:input:text",
  "fc:frame:button:1",
  "fc:frame:button:2",
  "fc:frame:button:3",
  "fc:frame:button:4",
  "og:image",
  "og:title"
];

// src/validateFrameMessage.ts
var import_core3 = require("@farcaster/core");
async function validateFrameMessage(body, {
  hubHttpUrl = "https://api.neynar.com:2281",
  hubRequestOptions = {
    headers: {
      api_key: "NEYNAR_FRAMES_JS"
    }
  }
} = {}) {
  const { headers, ...rest } = hubRequestOptions;
  const validateMessageResponse = await fetch(
    `${hubHttpUrl}/v1/validateMessage`,
    {
      method: "POST",
      headers: {
        "Content-Type": "application/octet-stream",
        ...headers
      },
      body: hexStringToUint8Array(body.trustedData.messageBytes),
      ...rest
    }
  );
  const validateMessageJson = await validateMessageResponse.json();
  if (validateMessageJson.valid) {
    return {
      isValid: true,
      message: import_core3.Message.fromJSON(
        validateMessageJson.message
      )
    };
  } else {
    return {
      isValid: false,
      message: void 0
    };
  }
}

// src/getFrameMessage.ts
var import_core4 = require("@farcaster/core");
async function getFrameMessage(payload, {
  fetchHubContext = true,
  hubHttpUrl = "https://api.neynar.com:2281",
  hubRequestOptions = {
    headers: {
      api_key: "NEYNAR_FRAMES_JS"
    }
  }
} = {}) {
  const decodedMessage = import_core4.Message.decode(
    Buffer.from(payload.trustedData.messageBytes, "hex")
  );
  const { buttonIndex, inputText: inputTextBytes } = decodedMessage.data.frameActionBody || {};
  const inputText = inputTextBytes ? Buffer.from(inputTextBytes).toString("utf-8") : void 0;
  const requesterFid = decodedMessage.data.fid;
  const castId = decodedMessage.data.frameActionBody.castId ? normalizeCastId(decodedMessage.data.frameActionBody.castId) : void 0;
  const parsedData = {
    buttonIndex,
    castId,
    inputText,
    requesterFid
  };
  if (fetchHubContext) {
    const [
      validationResult,
      requesterFollowsCaster,
      casterFollowsRequester,
      likedCast,
      recastedCast,
      requesterVerifiedAddresses,
      requesterUserData
    ] = await Promise.all([
      validateFrameMessage(payload, {
        hubHttpUrl,
        hubRequestOptions
      }),
      fetch(
        `${hubHttpUrl}/v1/linkById?fid=${requesterFid}&target_fid=${castId?.fid}&link_type=follow`,
        hubRequestOptions
      ).then((res) => res.ok || requesterFid === castId?.fid),
      fetch(
        `${hubHttpUrl}/v1/linkById?fid=${castId?.fid}&target_fid=${requesterFid}&link_type=follow`,
        hubRequestOptions
      ).then((res) => res.ok || requesterFid === castId?.fid),
      fetch(
        `${hubHttpUrl}/v1/reactionById?fid=${requesterFid}&reaction_type=1&target_fid=${castId?.fid}&target_hash=${castId?.hash}`,
        hubRequestOptions
      ).then((res) => res.ok),
      fetch(
        `${hubHttpUrl}/v1/reactionById?fid=${requesterFid}&reaction_type=2&target_fid=${castId?.fid}&target_hash=${castId?.hash}`,
        hubRequestOptions
      ).then((res) => res.ok),
      getAddressForFid({
        fid: requesterFid,
        options: {
          hubHttpUrl,
          hubRequestOptions
        }
      }),
      getUserDataForFid({
        fid: requesterFid,
        options: {
          hubHttpUrl,
          hubRequestOptions
        }
      })
    ]);
    const hubContext = {
      isValid: validationResult.isValid,
      casterFollowsRequester,
      requesterFollowsCaster,
      likedCast,
      recastedCast,
      requesterVerifiedAddresses: requesterVerifiedAddresses ? [requesterVerifiedAddresses] : [],
      requesterUserData
    };
    return { ...parsedData, ...hubContext };
  } else {
    return parsedData;
  }
}

// src/getTokenUrl.ts
function getTokenUrl({
  address,
  tokenId,
  chainNamespace = "eip155",
  chain: chainArg,
  chainId: chainIdArg
}) {
  let chainId = null;
  if (chainIdArg) {
    chainId = chainIdArg.toString();
  } else if (chainArg) {
    chainId = chainArg.id.toString();
  }
  if (!chainId) {
    throw new Error("Invalid chainName or chain object");
  }
  return `${chainNamespace ? `${chainNamespace}:` : ""}${chainId}:${address}${tokenId ? `:${tokenId}` : ""}`;
}

// src/getTokenFromUrl.ts
function getTokenFromUrl(url) {
  const [namespace, chainId, address, tokenId] = url.split(":");
  if (!namespace || !chainId || !address) {
    throw new Error("Invalid token URL");
  }
  return {
    namespace,
    chainId: parseInt(chainId),
    address,
    tokenId: tokenId || void 0
  };
}
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  bytesToHexString,
  frameErrorKeys,
  getAddressForFid,
  getByteLength,
  getFrame,
  getFrameFlattened,
  getFrameHtml,
  getFrameHtmlHead,
  getFrameMessage,
  getFrameMessageFromRequestBody,
  getTokenFromUrl,
  getTokenUrl,
  getUserDataForFid,
  hexStringToUint8Array,
  isFrameButtonLink,
  isFrameButtonMint,
  isValidVersion,
  normalizeCastId,
  parseButtonElement,
  validateFrameMessage
});
