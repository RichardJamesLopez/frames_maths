"use strict";
var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// src/getFrameMessage.ts
var getFrameMessage_exports = {};
__export(getFrameMessage_exports, {
  getFrameMessage: () => getFrameMessage
});
module.exports = __toCommonJS(getFrameMessage_exports);
var import_core4 = require("@farcaster/core");

// src/getAddressForFid.ts
var import_viem = require("viem");
var import_chains = require("viem/chains");
async function getAddressForFid({
  fid,
  options = {}
}) {
  const {
    fallbackToCustodyAddress = true,
    hubHttpUrl = "https://api.neynar.com:2281",
    hubRequestOptions = {
      headers: {
        api_key: "NEYNAR_FRAMES_JS"
      }
    }
  } = options;
  const verificationsResponse = await fetch(
    `${hubHttpUrl}/v1/verificationsByFid?fid=${fid}`,
    hubRequestOptions
  );
  const { messages } = await verificationsResponse.json();
  if (messages[0]) {
    const {
      data: {
        verificationAddEthAddressBody: { address }
      }
    } = messages[0];
    return address;
  } else if (fallbackToCustodyAddress) {
    const publicClient = (0, import_viem.createPublicClient)({
      transport: (0, import_viem.http)(),
      chain: import_chains.optimism
    });
    const address = await publicClient.readContract({
      abi: (0, import_viem.parseAbi)(["function custodyOf(uint256 fid) view returns (address)"]),
      // IdRegistry contract address
      address: "0x00000000fc6c5f01fc30151999387bb99a9f489b",
      functionName: "custodyOf",
      args: [BigInt(fid)]
    });
    return address;
  } else {
    return null;
  }
}

// src/getUserDataForFid.ts
var import_core = require("@farcaster/core");
async function getUserDataForFid({
  fid,
  options = {}
}) {
  const {
    hubHttpUrl = "https://api.neynar.com:2281",
    hubRequestOptions = {
      headers: {
        api_key: "NEYNAR_FRAMES_JS"
      }
    }
  } = options;
  const userDataResponse = await fetch(
    `${hubHttpUrl}/v1/userDataByFid?fid=${fid}`,
    hubRequestOptions
  );
  const { messages } = await userDataResponse.json();
  if (messages && messages.length > 0) {
    const valuesByType = messages.reduce((acc, messageJson) => {
      const message = import_core.Message.fromJSON(messageJson);
      if (message.data?.type !== import_core.MessageType.USER_DATA_ADD) {
        return;
      }
      const timestamp = message.data.timestamp;
      const { type, value } = message.data.userDataBody;
      if (!acc[type]) {
        acc[type] = { value, timestamp };
      } else if (message.data.timestamp > acc[type].timestamp) {
        acc[type] = { value, timestamp };
      }
      return acc;
    }, {});
    return {
      profileImage: valuesByType[import_core.UserDataType.PFP]?.value,
      displayName: valuesByType[import_core.UserDataType.DISPLAY]?.value,
      username: valuesByType[import_core.UserDataType.USERNAME]?.value,
      bio: valuesByType[import_core.UserDataType.BIO]?.value
    };
  } else {
    return null;
  }
}

// src/validateFrame.ts
var cheerio = __toESM(require("cheerio"));

// src/utils.ts
var import_core2 = require("@farcaster/core");
function bytesToHexString(bytes) {
  return "0x" + Buffer.from(bytes).toString("hex");
}
function hexStringToUint8Array(hexstring) {
  return new Uint8Array(
    hexstring.match(/.{1,2}/g).map((byte) => parseInt(byte, 16))
  );
}
function normalizeCastId(castId) {
  return {
    fid: castId.fid,
    hash: bytesToHexString(castId.hash)
  };
}

// src/validateFrameMessage.ts
var import_core3 = require("@farcaster/core");
async function validateFrameMessage(body, {
  hubHttpUrl = "https://api.neynar.com:2281",
  hubRequestOptions = {
    headers: {
      api_key: "NEYNAR_FRAMES_JS"
    }
  }
} = {}) {
  const { headers, ...rest } = hubRequestOptions;
  const validateMessageResponse = await fetch(
    `${hubHttpUrl}/v1/validateMessage`,
    {
      method: "POST",
      headers: {
        "Content-Type": "application/octet-stream",
        ...headers
      },
      body: hexStringToUint8Array(body.trustedData.messageBytes),
      ...rest
    }
  );
  const validateMessageJson = await validateMessageResponse.json();
  if (validateMessageJson.valid) {
    return {
      isValid: true,
      message: import_core3.Message.fromJSON(
        validateMessageJson.message
      )
    };
  } else {
    return {
      isValid: false,
      message: void 0
    };
  }
}

// src/getFrameMessage.ts
async function getFrameMessage(payload, {
  fetchHubContext = true,
  hubHttpUrl = "https://api.neynar.com:2281",
  hubRequestOptions = {
    headers: {
      api_key: "NEYNAR_FRAMES_JS"
    }
  }
} = {}) {
  const decodedMessage = import_core4.Message.decode(
    Buffer.from(payload.trustedData.messageBytes, "hex")
  );
  const { buttonIndex, inputText: inputTextBytes } = decodedMessage.data.frameActionBody || {};
  const inputText = inputTextBytes ? Buffer.from(inputTextBytes).toString("utf-8") : void 0;
  const requesterFid = decodedMessage.data.fid;
  const castId = decodedMessage.data.frameActionBody.castId ? normalizeCastId(decodedMessage.data.frameActionBody.castId) : void 0;
  const parsedData = {
    buttonIndex,
    castId,
    inputText,
    requesterFid
  };
  if (fetchHubContext) {
    const [
      validationResult,
      requesterFollowsCaster,
      casterFollowsRequester,
      likedCast,
      recastedCast,
      requesterVerifiedAddresses,
      requesterUserData
    ] = await Promise.all([
      validateFrameMessage(payload, {
        hubHttpUrl,
        hubRequestOptions
      }),
      fetch(
        `${hubHttpUrl}/v1/linkById?fid=${requesterFid}&target_fid=${castId?.fid}&link_type=follow`,
        hubRequestOptions
      ).then((res) => res.ok || requesterFid === castId?.fid),
      fetch(
        `${hubHttpUrl}/v1/linkById?fid=${castId?.fid}&target_fid=${requesterFid}&link_type=follow`,
        hubRequestOptions
      ).then((res) => res.ok || requesterFid === castId?.fid),
      fetch(
        `${hubHttpUrl}/v1/reactionById?fid=${requesterFid}&reaction_type=1&target_fid=${castId?.fid}&target_hash=${castId?.hash}`,
        hubRequestOptions
      ).then((res) => res.ok),
      fetch(
        `${hubHttpUrl}/v1/reactionById?fid=${requesterFid}&reaction_type=2&target_fid=${castId?.fid}&target_hash=${castId?.hash}`,
        hubRequestOptions
      ).then((res) => res.ok),
      getAddressForFid({
        fid: requesterFid,
        options: {
          hubHttpUrl,
          hubRequestOptions
        }
      }),
      getUserDataForFid({
        fid: requesterFid,
        options: {
          hubHttpUrl,
          hubRequestOptions
        }
      })
    ]);
    const hubContext = {
      isValid: validationResult.isValid,
      casterFollowsRequester,
      requesterFollowsCaster,
      likedCast,
      recastedCast,
      requesterVerifiedAddresses: requesterVerifiedAddresses ? [requesterVerifiedAddresses] : [],
      requesterUserData
    };
    return { ...parsedData, ...hubContext };
  } else {
    return parsedData;
  }
}
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  getFrameMessage
});
