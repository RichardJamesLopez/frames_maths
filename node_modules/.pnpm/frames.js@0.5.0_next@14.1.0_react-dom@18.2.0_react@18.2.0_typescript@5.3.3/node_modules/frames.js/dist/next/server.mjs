import "../chunk-DJZ7RNFL.mjs";
import {
  getFrameMessage,
  validateFrameMessage
} from "../chunk-CBZ7MCMR.mjs";
import "../chunk-TZRVJNFA.mjs";
import "../chunk-PONLGPQ3.mjs";
import "../chunk-Q62MVRTC.mjs";
import "../chunk-JOBSAL55.mjs";
import "../chunk-2OLHE2QI.mjs";
import {
  getByteLength
} from "../chunk-4P3SBRVZ.mjs";
import "../chunk-IFWCNOVI.mjs";
import "../chunk-XVSVMG4Y.mjs";

// src/next/server.tsx
import { headers } from "next/headers";
import { NextResponse } from "next/server";
import React from "react";
import { ImageResponse } from "@vercel/og";
async function validateActionSignature(frameActionPayload, options) {
  if (options?.hubHttpUrl) {
    if (!options.hubHttpUrl.startsWith("http")) {
      throw new Error(
        `frames.js: Invalid Hub URL: ${options?.hubHttpUrl}, ensure you have included the protocol (e.g. https://)`
      );
    }
  }
  if (!frameActionPayload) {
    return null;
  }
  const { isValid, message } = await validateFrameMessage(
    frameActionPayload,
    options
  );
  if (!isValid || !message) {
    throw new Error("frames.js: signature failed verification");
  }
  return message;
}
async function getFrameMessage2(frameActionPayload, options) {
  if (options?.hubHttpUrl) {
    if (!options.hubHttpUrl.startsWith("http")) {
      throw new Error(
        `frames.js: Invalid Hub URL: ${options?.hubHttpUrl}, ensure you have included the protocol (e.g. https://)`
      );
    }
  }
  if (!frameActionPayload) {
    console.log(
      "info: no frameActionPayload, this is expected for the homeframe"
    );
    return null;
  }
  const result = await getFrameMessage(frameActionPayload, options);
  if (!result) {
    throw new Error("frames.js: something went wrong getting frame message");
  }
  return result;
}
function getPreviousFrame(searchParams) {
  const headersObj = headers();
  const headersList = {
    userAgent: headersObj.get("user-agent"),
    acceptLanguage: headersObj.get("accept-language"),
    host: headersObj.get("host"),
    pathname: headersObj.get("next-url") ?? "",
    urlWithoutPathname: `${headersObj.get("x-forwarded-proto")}://${headersObj.get("x-forwarded-host")}`,
    url: headersObj.get("referer") || `${headersObj.get("x-forwarded-proto")}://${headersObj.get("x-forwarded-host")}${headersObj.get("next-url") ?? ""}`
  };
  return createPreviousFrame(parseFrameParams(searchParams), headersList);
}
function createPreviousFrame(previousFrameFromParams, headers2) {
  return {
    ...previousFrameFromParams,
    headers: headers2
  };
}
function parseFrameParams(searchParams) {
  const frameActionReceived = searchParams?.postBody && typeof searchParams?.postBody === "string" ? JSON.parse(searchParams?.postBody) : null;
  const framePrevState = searchParams?.prevState && typeof searchParams?.prevState === "string" ? JSON.parse(searchParams?.prevState) : null;
  const framePrevRedirects = searchParams?.prevRedirects && typeof searchParams?.prevRedirects === "string" ? JSON.parse(searchParams?.prevRedirects) : null;
  const pathname = searchParams?.pathname && typeof searchParams?.pathname === "string" ? searchParams?.pathname : void 0;
  return {
    postBody: frameActionReceived,
    prevState: framePrevState,
    pathname,
    prevRedirects: framePrevRedirects
  };
}
function useFramesReducer(reducer, initialState, initializerArg) {
  function frameReducerInit(initial) {
    if (initial.prevState === null || initial.postBody === null)
      return initialState;
    return reducer(initial.prevState, initial);
  }
  function dispatch(actionIndex) {
  }
  return [frameReducerInit(initializerArg), dispatch];
}
async function POST(req, res, redirectHandler) {
  const body = await req.json();
  const url = new URL(req.url);
  url.pathname = url.searchParams.get("p") || "";
  url.searchParams.set("postBody", JSON.stringify(body));
  url.searchParams.set("prevState", url.searchParams.get("s") ?? "");
  url.searchParams.set("prevRedirects", url.searchParams.get("r") ?? "");
  url.searchParams.delete("p");
  url.searchParams.delete("s");
  url.searchParams.delete("r");
  const prevFrame = getPreviousFrame(
    Object.fromEntries(url.searchParams.entries())
  );
  if (prevFrame.postBody?.untrustedData.buttonIndex && prevFrame.prevRedirects?.hasOwnProperty(
    prevFrame.postBody?.untrustedData.buttonIndex
  ) && prevFrame.prevRedirects[prevFrame.postBody?.untrustedData.buttonIndex]) {
    return NextResponse.redirect(
      prevFrame.prevRedirects[`${prevFrame.postBody?.untrustedData.buttonIndex}`],
      { status: 302 }
    );
  }
  if (prevFrame.postBody?.untrustedData.buttonIndex && prevFrame.prevRedirects?.hasOwnProperty(
    `_${prevFrame.postBody?.untrustedData.buttonIndex}`
  )) {
    if (!redirectHandler) {
      return NextResponse.json(
        {
          message: "frames.js: You need to define either an href property on your FrameButton that has a `redirect` prop, or pass a third argument to `POST`"
        },
        {
          status: 500,
          statusText: "frames.js: You need to define either an href property on your FrameButton that has a `redirect` prop, or pass a third argument to `POST`"
        }
      );
    }
    const redirectValue = redirectHandler(prevFrame);
    if (redirectValue === void 0) {
      return NextResponse.json(
        {
          message: "frames.js: Your framesReducer (Second argument of POST) returned undefined when it needed to return a url"
        },
        {
          status: 500,
          statusText: "frames.js: Your framesReducer (Second argument of POST) returned undefined when it needed to return a url"
        }
      );
    }
    return NextResponse.redirect(redirectValue, { status: 302 });
  }
  return NextResponse.redirect(url.toString(), { status: 302 });
}
function FrameContainer({
  postUrl,
  children,
  state,
  pathname,
  previousFrame
}) {
  if (!pathname)
    console.warn(
      "frames.js: warning: You have not specified a `pathname` prop on your <FrameContainer>. This is not recommended, as it will default to the root path and not work if your frame is being rendered at a different path. Please specify a `pathname` prop on your <FrameContainer>."
    );
  const nextIndexByComponentType = {
    button: 1,
    image: 1,
    input: 1
  };
  let redirectMap = {};
  const newTree = /* @__PURE__ */ React.createElement(React.Fragment, null, React.Children.map(children, (child) => {
    if (child === null)
      return;
    switch (child.type) {
      case FrameButton:
        if (!React.isValidElement(child)) {
          return child;
        }
        if (nextIndexByComponentType.button > 4) {
          throw new Error("too many buttons");
        }
        if (child.props.action === "post_redirect") {
          redirectMap[nextIndexByComponentType.button] = child.props.target;
        }
        return /* @__PURE__ */ React.createElement(
          FFrameButtonShim,
          {
            ...child.props,
            actionIndex: nextIndexByComponentType.button++
          }
        );
      case FrameInput:
        if (nextIndexByComponentType.input > 1) {
          throw new Error("max one input allowed");
        }
        nextIndexByComponentType.input++;
        return child;
      case FrameImage:
        if (nextIndexByComponentType.image > 1) {
          throw new Error("max one image allowed");
        }
        nextIndexByComponentType.image++;
        return child;
      default:
        throw new Error(
          "invalid child of <Frame>, must be a <FrameButton> or <FrameImage>"
        );
    }
  }));
  if (nextIndexByComponentType.image === 1)
    throw new Error("an <FrameImage> element inside a <Frame> is required");
  const searchParams = new URLSearchParams();
  searchParams.set("p", pathname ?? previousFrame.headers.pathname ?? "/");
  searchParams.set("s", JSON.stringify(state));
  searchParams.set("r", JSON.stringify(redirectMap));
  const postUrlRoute = postUrl.startsWith("/") ? `${previousFrame.headers.urlWithoutPathname}${postUrl}` : postUrl;
  const postUrlFull = `${postUrlRoute}?${searchParams.toString()}`;
  if (getByteLength(postUrlFull) > 256) {
    console.error(
      `post_url is too long. ${postUrlFull.length} bytes, max is 256. The url is generated to include your state and the redirect urls in <FrameButton href={s. In order to shorten your post_url, you could try storing less in state, or providing redirects via the POST handler's second optional argument instead, which saves url space. The generated post_url was: `,
      postUrlFull
    );
    throw new Error("post_url is more than 256 bytes");
  }
  return /* @__PURE__ */ React.createElement(React.Fragment, null, /* @__PURE__ */ React.createElement("meta", { name: "fc:frame", content: "vNext" }), /* @__PURE__ */ React.createElement("meta", { name: "fc:frame:post_url", content: postUrlFull }), newTree);
}
function FrameButton(props) {
  return null;
}
function FFrameButtonShim({
  actionIndex,
  target,
  action = "post",
  children
}) {
  return /* @__PURE__ */ React.createElement(React.Fragment, null, /* @__PURE__ */ React.createElement(
    "meta",
    {
      name: `fc:frame:button:${actionIndex}`,
      content: String(children)
    }
  ), /* @__PURE__ */ React.createElement("meta", { name: `fc:frame:button:${actionIndex}:action`, content: action }), target ? /* @__PURE__ */ React.createElement("meta", { name: `fc:frame:button:${actionIndex}:target`, content: target }) : null);
}
function FrameInput({ text }) {
  return /* @__PURE__ */ React.createElement(React.Fragment, null, /* @__PURE__ */ React.createElement("meta", { name: "fc:frame:input:text", content: text }));
}
async function FrameImage(props) {
  let imgSrc;
  if ("children" in props) {
    const imageOptions = {
      ...props.aspectRatio === "1:1" ? {
        width: 1146,
        height: 1146
      } : {
        width: 1146,
        height: 600
      },
      ...props.options ?? {}
    };
    const imageResponse = new ImageResponse(
      /* @__PURE__ */ React.createElement(
        "div",
        {
          style: {
            display: "flex",
            // Use flex layout
            flexDirection: "row",
            // Align items horizontally
            alignItems: "stretch",
            // Stretch items to fill the container height
            width: "100%",
            height: "100vh",
            // Full viewport height
            backgroundColor: "white"
          }
        },
        /* @__PURE__ */ React.createElement(
          "div",
          {
            style: {
              display: "flex",
              flexDirection: "column",
              justifyContent: "center",
              alignItems: "center",
              lineHeight: 1.2,
              fontSize: 36,
              color: "black",
              flex: 1,
              overflow: "hidden"
            }
          },
          props.children
        )
      ),
      imageOptions
    );
    const imgBuffer = await imageResponse?.arrayBuffer();
    imgSrc = `data:image/png;base64,${Buffer.from(imgBuffer).toString("base64")}`;
  } else {
    imgSrc = props.src;
  }
  return /* @__PURE__ */ React.createElement(React.Fragment, null, /* @__PURE__ */ React.createElement("meta", { name: "fc:frame:image", content: imgSrc }), /* @__PURE__ */ React.createElement("meta", { property: "og:image", content: imgSrc }), props.aspectRatio && /* @__PURE__ */ React.createElement(
    "meta",
    {
      name: "fc:frame:image:aspect_ratio",
      content: props.aspectRatio
    }
  ));
}
export {
  FrameButton,
  FrameContainer,
  FrameImage,
  FrameInput,
  POST,
  createPreviousFrame,
  getFrameMessage2 as getFrameMessage,
  getPreviousFrame,
  parseFrameParams,
  useFramesReducer,
  validateActionSignature
};
