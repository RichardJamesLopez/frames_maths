"use strict";
var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// src/next/server.tsx
var server_exports = {};
__export(server_exports, {
  FrameButton: () => FrameButton,
  FrameContainer: () => FrameContainer,
  FrameImage: () => FrameImage,
  FrameInput: () => FrameInput,
  POST: () => POST,
  createPreviousFrame: () => createPreviousFrame,
  getFrameMessage: () => getFrameMessage2,
  getPreviousFrame: () => getPreviousFrame,
  parseFrameParams: () => parseFrameParams,
  useFramesReducer: () => useFramesReducer,
  validateActionSignature: () => validateActionSignature
});
module.exports = __toCommonJS(server_exports);
var import_headers = require("next/headers");
var import_server = require("next/server");
var import_react = __toESM(require("react"));

// src/getAddressForFid.ts
var import_viem = require("viem");
var import_chains = require("viem/chains");
async function getAddressForFid({
  fid,
  options = {}
}) {
  const {
    fallbackToCustodyAddress = true,
    hubHttpUrl = "https://api.neynar.com:2281",
    hubRequestOptions = {
      headers: {
        api_key: "NEYNAR_FRAMES_JS"
      }
    }
  } = options;
  const verificationsResponse = await fetch(
    `${hubHttpUrl}/v1/verificationsByFid?fid=${fid}`,
    hubRequestOptions
  );
  const { messages } = await verificationsResponse.json();
  if (messages[0]) {
    const {
      data: {
        verificationAddEthAddressBody: { address }
      }
    } = messages[0];
    return address;
  } else if (fallbackToCustodyAddress) {
    const publicClient = (0, import_viem.createPublicClient)({
      transport: (0, import_viem.http)(),
      chain: import_chains.optimism
    });
    const address = await publicClient.readContract({
      abi: (0, import_viem.parseAbi)(["function custodyOf(uint256 fid) view returns (address)"]),
      // IdRegistry contract address
      address: "0x00000000fc6c5f01fc30151999387bb99a9f489b",
      functionName: "custodyOf",
      args: [BigInt(fid)]
    });
    return address;
  } else {
    return null;
  }
}

// src/getUserDataForFid.ts
var import_core = require("@farcaster/core");
async function getUserDataForFid({
  fid,
  options = {}
}) {
  const {
    hubHttpUrl = "https://api.neynar.com:2281",
    hubRequestOptions = {
      headers: {
        api_key: "NEYNAR_FRAMES_JS"
      }
    }
  } = options;
  const userDataResponse = await fetch(
    `${hubHttpUrl}/v1/userDataByFid?fid=${fid}`,
    hubRequestOptions
  );
  const { messages } = await userDataResponse.json();
  if (messages && messages.length > 0) {
    const valuesByType = messages.reduce((acc, messageJson) => {
      const message = import_core.Message.fromJSON(messageJson);
      if (message.data?.type !== import_core.MessageType.USER_DATA_ADD) {
        return;
      }
      const timestamp = message.data.timestamp;
      const { type, value } = message.data.userDataBody;
      if (!acc[type]) {
        acc[type] = { value, timestamp };
      } else if (message.data.timestamp > acc[type].timestamp) {
        acc[type] = { value, timestamp };
      }
      return acc;
    }, {});
    return {
      profileImage: valuesByType[import_core.UserDataType.PFP]?.value,
      displayName: valuesByType[import_core.UserDataType.DISPLAY]?.value,
      username: valuesByType[import_core.UserDataType.USERNAME]?.value,
      bio: valuesByType[import_core.UserDataType.BIO]?.value
    };
  } else {
    return null;
  }
}

// src/validateFrame.ts
var cheerio = __toESM(require("cheerio"));

// src/utils.ts
var import_core2 = require("@farcaster/core");
function bytesToHexString(bytes) {
  return "0x" + Buffer.from(bytes).toString("hex");
}
function getByteLength(str) {
  return Buffer.from(str).byteLength;
}
function hexStringToUint8Array(hexstring) {
  return new Uint8Array(
    hexstring.match(/.{1,2}/g).map((byte) => parseInt(byte, 16))
  );
}
function normalizeCastId(castId) {
  return {
    fid: castId.fid,
    hash: bytesToHexString(castId.hash)
  };
}

// src/validateFrameMessage.ts
var import_core3 = require("@farcaster/core");
async function validateFrameMessage(body, {
  hubHttpUrl = "https://api.neynar.com:2281",
  hubRequestOptions = {
    headers: {
      api_key: "NEYNAR_FRAMES_JS"
    }
  }
} = {}) {
  const { headers: headers2, ...rest } = hubRequestOptions;
  const validateMessageResponse = await fetch(
    `${hubHttpUrl}/v1/validateMessage`,
    {
      method: "POST",
      headers: {
        "Content-Type": "application/octet-stream",
        ...headers2
      },
      body: hexStringToUint8Array(body.trustedData.messageBytes),
      ...rest
    }
  );
  const validateMessageJson = await validateMessageResponse.json();
  if (validateMessageJson.valid) {
    return {
      isValid: true,
      message: import_core3.Message.fromJSON(
        validateMessageJson.message
      )
    };
  } else {
    return {
      isValid: false,
      message: void 0
    };
  }
}

// src/getFrameMessage.ts
var import_core4 = require("@farcaster/core");
async function getFrameMessage(payload, {
  fetchHubContext = true,
  hubHttpUrl = "https://api.neynar.com:2281",
  hubRequestOptions = {
    headers: {
      api_key: "NEYNAR_FRAMES_JS"
    }
  }
} = {}) {
  const decodedMessage = import_core4.Message.decode(
    Buffer.from(payload.trustedData.messageBytes, "hex")
  );
  const { buttonIndex, inputText: inputTextBytes } = decodedMessage.data.frameActionBody || {};
  const inputText = inputTextBytes ? Buffer.from(inputTextBytes).toString("utf-8") : void 0;
  const requesterFid = decodedMessage.data.fid;
  const castId = decodedMessage.data.frameActionBody.castId ? normalizeCastId(decodedMessage.data.frameActionBody.castId) : void 0;
  const parsedData = {
    buttonIndex,
    castId,
    inputText,
    requesterFid
  };
  if (fetchHubContext) {
    const [
      validationResult,
      requesterFollowsCaster,
      casterFollowsRequester,
      likedCast,
      recastedCast,
      requesterVerifiedAddresses,
      requesterUserData
    ] = await Promise.all([
      validateFrameMessage(payload, {
        hubHttpUrl,
        hubRequestOptions
      }),
      fetch(
        `${hubHttpUrl}/v1/linkById?fid=${requesterFid}&target_fid=${castId?.fid}&link_type=follow`,
        hubRequestOptions
      ).then((res) => res.ok || requesterFid === castId?.fid),
      fetch(
        `${hubHttpUrl}/v1/linkById?fid=${castId?.fid}&target_fid=${requesterFid}&link_type=follow`,
        hubRequestOptions
      ).then((res) => res.ok || requesterFid === castId?.fid),
      fetch(
        `${hubHttpUrl}/v1/reactionById?fid=${requesterFid}&reaction_type=1&target_fid=${castId?.fid}&target_hash=${castId?.hash}`,
        hubRequestOptions
      ).then((res) => res.ok),
      fetch(
        `${hubHttpUrl}/v1/reactionById?fid=${requesterFid}&reaction_type=2&target_fid=${castId?.fid}&target_hash=${castId?.hash}`,
        hubRequestOptions
      ).then((res) => res.ok),
      getAddressForFid({
        fid: requesterFid,
        options: {
          hubHttpUrl,
          hubRequestOptions
        }
      }),
      getUserDataForFid({
        fid: requesterFid,
        options: {
          hubHttpUrl,
          hubRequestOptions
        }
      })
    ]);
    const hubContext = {
      isValid: validationResult.isValid,
      casterFollowsRequester,
      requesterFollowsCaster,
      likedCast,
      recastedCast,
      requesterVerifiedAddresses: requesterVerifiedAddresses ? [requesterVerifiedAddresses] : [],
      requesterUserData
    };
    return { ...parsedData, ...hubContext };
  } else {
    return parsedData;
  }
}

// src/next/server.tsx
var import_og = require("@vercel/og");
async function validateActionSignature(frameActionPayload, options) {
  if (options?.hubHttpUrl) {
    if (!options.hubHttpUrl.startsWith("http")) {
      throw new Error(
        `frames.js: Invalid Hub URL: ${options?.hubHttpUrl}, ensure you have included the protocol (e.g. https://)`
      );
    }
  }
  if (!frameActionPayload) {
    return null;
  }
  const { isValid, message } = await validateFrameMessage(
    frameActionPayload,
    options
  );
  if (!isValid || !message) {
    throw new Error("frames.js: signature failed verification");
  }
  return message;
}
async function getFrameMessage2(frameActionPayload, options) {
  if (options?.hubHttpUrl) {
    if (!options.hubHttpUrl.startsWith("http")) {
      throw new Error(
        `frames.js: Invalid Hub URL: ${options?.hubHttpUrl}, ensure you have included the protocol (e.g. https://)`
      );
    }
  }
  if (!frameActionPayload) {
    console.log(
      "info: no frameActionPayload, this is expected for the homeframe"
    );
    return null;
  }
  const result = await getFrameMessage(frameActionPayload, options);
  if (!result) {
    throw new Error("frames.js: something went wrong getting frame message");
  }
  return result;
}
function getPreviousFrame(searchParams) {
  const headersObj = (0, import_headers.headers)();
  const headersList = {
    userAgent: headersObj.get("user-agent"),
    acceptLanguage: headersObj.get("accept-language"),
    host: headersObj.get("host"),
    pathname: headersObj.get("next-url") ?? "",
    urlWithoutPathname: `${headersObj.get("x-forwarded-proto")}://${headersObj.get("x-forwarded-host")}`,
    url: headersObj.get("referer") || `${headersObj.get("x-forwarded-proto")}://${headersObj.get("x-forwarded-host")}${headersObj.get("next-url") ?? ""}`
  };
  return createPreviousFrame(parseFrameParams(searchParams), headersList);
}
function createPreviousFrame(previousFrameFromParams, headers2) {
  return {
    ...previousFrameFromParams,
    headers: headers2
  };
}
function parseFrameParams(searchParams) {
  const frameActionReceived = searchParams?.postBody && typeof searchParams?.postBody === "string" ? JSON.parse(searchParams?.postBody) : null;
  const framePrevState = searchParams?.prevState && typeof searchParams?.prevState === "string" ? JSON.parse(searchParams?.prevState) : null;
  const framePrevRedirects = searchParams?.prevRedirects && typeof searchParams?.prevRedirects === "string" ? JSON.parse(searchParams?.prevRedirects) : null;
  const pathname = searchParams?.pathname && typeof searchParams?.pathname === "string" ? searchParams?.pathname : void 0;
  return {
    postBody: frameActionReceived,
    prevState: framePrevState,
    pathname,
    prevRedirects: framePrevRedirects
  };
}
function useFramesReducer(reducer, initialState, initializerArg) {
  function frameReducerInit(initial) {
    if (initial.prevState === null || initial.postBody === null)
      return initialState;
    return reducer(initial.prevState, initial);
  }
  function dispatch(actionIndex) {
  }
  return [frameReducerInit(initializerArg), dispatch];
}
async function POST(req, res, redirectHandler) {
  const body = await req.json();
  const url = new URL(req.url);
  url.pathname = url.searchParams.get("p") || "";
  url.searchParams.set("postBody", JSON.stringify(body));
  url.searchParams.set("prevState", url.searchParams.get("s") ?? "");
  url.searchParams.set("prevRedirects", url.searchParams.get("r") ?? "");
  url.searchParams.delete("p");
  url.searchParams.delete("s");
  url.searchParams.delete("r");
  const prevFrame = getPreviousFrame(
    Object.fromEntries(url.searchParams.entries())
  );
  if (prevFrame.postBody?.untrustedData.buttonIndex && prevFrame.prevRedirects?.hasOwnProperty(
    prevFrame.postBody?.untrustedData.buttonIndex
  ) && prevFrame.prevRedirects[prevFrame.postBody?.untrustedData.buttonIndex]) {
    return import_server.NextResponse.redirect(
      prevFrame.prevRedirects[`${prevFrame.postBody?.untrustedData.buttonIndex}`],
      { status: 302 }
    );
  }
  if (prevFrame.postBody?.untrustedData.buttonIndex && prevFrame.prevRedirects?.hasOwnProperty(
    `_${prevFrame.postBody?.untrustedData.buttonIndex}`
  )) {
    if (!redirectHandler) {
      return import_server.NextResponse.json(
        {
          message: "frames.js: You need to define either an href property on your FrameButton that has a `redirect` prop, or pass a third argument to `POST`"
        },
        {
          status: 500,
          statusText: "frames.js: You need to define either an href property on your FrameButton that has a `redirect` prop, or pass a third argument to `POST`"
        }
      );
    }
    const redirectValue = redirectHandler(prevFrame);
    if (redirectValue === void 0) {
      return import_server.NextResponse.json(
        {
          message: "frames.js: Your framesReducer (Second argument of POST) returned undefined when it needed to return a url"
        },
        {
          status: 500,
          statusText: "frames.js: Your framesReducer (Second argument of POST) returned undefined when it needed to return a url"
        }
      );
    }
    return import_server.NextResponse.redirect(redirectValue, { status: 302 });
  }
  return import_server.NextResponse.redirect(url.toString(), { status: 302 });
}
function FrameContainer({
  postUrl,
  children,
  state,
  pathname,
  previousFrame
}) {
  if (!pathname)
    console.warn(
      "frames.js: warning: You have not specified a `pathname` prop on your <FrameContainer>. This is not recommended, as it will default to the root path and not work if your frame is being rendered at a different path. Please specify a `pathname` prop on your <FrameContainer>."
    );
  const nextIndexByComponentType = {
    button: 1,
    image: 1,
    input: 1
  };
  let redirectMap = {};
  const newTree = /* @__PURE__ */ import_react.default.createElement(import_react.default.Fragment, null, import_react.default.Children.map(children, (child) => {
    if (child === null)
      return;
    switch (child.type) {
      case FrameButton:
        if (!import_react.default.isValidElement(child)) {
          return child;
        }
        if (nextIndexByComponentType.button > 4) {
          throw new Error("too many buttons");
        }
        if (child.props.action === "post_redirect") {
          redirectMap[nextIndexByComponentType.button] = child.props.target;
        }
        return /* @__PURE__ */ import_react.default.createElement(
          FFrameButtonShim,
          {
            ...child.props,
            actionIndex: nextIndexByComponentType.button++
          }
        );
      case FrameInput:
        if (nextIndexByComponentType.input > 1) {
          throw new Error("max one input allowed");
        }
        nextIndexByComponentType.input++;
        return child;
      case FrameImage:
        if (nextIndexByComponentType.image > 1) {
          throw new Error("max one image allowed");
        }
        nextIndexByComponentType.image++;
        return child;
      default:
        throw new Error(
          "invalid child of <Frame>, must be a <FrameButton> or <FrameImage>"
        );
    }
  }));
  if (nextIndexByComponentType.image === 1)
    throw new Error("an <FrameImage> element inside a <Frame> is required");
  const searchParams = new URLSearchParams();
  searchParams.set("p", pathname ?? previousFrame.headers.pathname ?? "/");
  searchParams.set("s", JSON.stringify(state));
  searchParams.set("r", JSON.stringify(redirectMap));
  const postUrlRoute = postUrl.startsWith("/") ? `${previousFrame.headers.urlWithoutPathname}${postUrl}` : postUrl;
  const postUrlFull = `${postUrlRoute}?${searchParams.toString()}`;
  if (getByteLength(postUrlFull) > 256) {
    console.error(
      `post_url is too long. ${postUrlFull.length} bytes, max is 256. The url is generated to include your state and the redirect urls in <FrameButton href={s. In order to shorten your post_url, you could try storing less in state, or providing redirects via the POST handler's second optional argument instead, which saves url space. The generated post_url was: `,
      postUrlFull
    );
    throw new Error("post_url is more than 256 bytes");
  }
  return /* @__PURE__ */ import_react.default.createElement(import_react.default.Fragment, null, /* @__PURE__ */ import_react.default.createElement("meta", { name: "fc:frame", content: "vNext" }), /* @__PURE__ */ import_react.default.createElement("meta", { name: "fc:frame:post_url", content: postUrlFull }), newTree);
}
function FrameButton(props) {
  return null;
}
function FFrameButtonShim({
  actionIndex,
  target,
  action = "post",
  children
}) {
  return /* @__PURE__ */ import_react.default.createElement(import_react.default.Fragment, null, /* @__PURE__ */ import_react.default.createElement(
    "meta",
    {
      name: `fc:frame:button:${actionIndex}`,
      content: String(children)
    }
  ), /* @__PURE__ */ import_react.default.createElement("meta", { name: `fc:frame:button:${actionIndex}:action`, content: action }), target ? /* @__PURE__ */ import_react.default.createElement("meta", { name: `fc:frame:button:${actionIndex}:target`, content: target }) : null);
}
function FrameInput({ text }) {
  return /* @__PURE__ */ import_react.default.createElement(import_react.default.Fragment, null, /* @__PURE__ */ import_react.default.createElement("meta", { name: "fc:frame:input:text", content: text }));
}
async function FrameImage(props) {
  let imgSrc;
  if ("children" in props) {
    const imageOptions = {
      ...props.aspectRatio === "1:1" ? {
        width: 1146,
        height: 1146
      } : {
        width: 1146,
        height: 600
      },
      ...props.options ?? {}
    };
    const imageResponse = new import_og.ImageResponse(
      /* @__PURE__ */ import_react.default.createElement(
        "div",
        {
          style: {
            display: "flex",
            // Use flex layout
            flexDirection: "row",
            // Align items horizontally
            alignItems: "stretch",
            // Stretch items to fill the container height
            width: "100%",
            height: "100vh",
            // Full viewport height
            backgroundColor: "white"
          }
        },
        /* @__PURE__ */ import_react.default.createElement(
          "div",
          {
            style: {
              display: "flex",
              flexDirection: "column",
              justifyContent: "center",
              alignItems: "center",
              lineHeight: 1.2,
              fontSize: 36,
              color: "black",
              flex: 1,
              overflow: "hidden"
            }
          },
          props.children
        )
      ),
      imageOptions
    );
    const imgBuffer = await imageResponse?.arrayBuffer();
    imgSrc = `data:image/png;base64,${Buffer.from(imgBuffer).toString("base64")}`;
  } else {
    imgSrc = props.src;
  }
  return /* @__PURE__ */ import_react.default.createElement(import_react.default.Fragment, null, /* @__PURE__ */ import_react.default.createElement("meta", { name: "fc:frame:image", content: imgSrc }), /* @__PURE__ */ import_react.default.createElement("meta", { property: "og:image", content: imgSrc }), props.aspectRatio && /* @__PURE__ */ import_react.default.createElement(
    "meta",
    {
      name: "fc:frame:image:aspect_ratio",
      content: props.aspectRatio
    }
  ));
}
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  FrameButton,
  FrameContainer,
  FrameImage,
  FrameInput,
  POST,
  createPreviousFrame,
  getFrameMessage,
  getPreviousFrame,
  parseFrameParams,
  useFramesReducer,
  validateActionSignature
});
