import {
  getUserDataForFid
} from "./chunk-KTEQ4QOB.mjs";
import {
  getByteLength,
  hexStringToUint8Array,
  isFrameButtonLink,
  isFrameButtonMint,
  isValidVersion,
  normalizeCastId
} from "./chunk-4P3SBRVZ.mjs";
import {
  getAddressForFid
} from "./chunk-SQTCOFIS.mjs";

// src/validateFrame.ts
import * as cheerio from "cheerio";

// src/getFrame.ts
function getFrame({
  htmlString,
  url
}) {
  return validateFrame({ htmlString, url });
}
function parseButtonElement(elem) {
  const nameAttr = elem.attribs["name"] || elem.attribs["property"];
  const buttonIndex = nameAttr?.split(":")[3];
  try {
    return {
      buttonIndex: parseInt(buttonIndex || ""),
      content: elem.attribs["content"]
    };
  } catch (error) {
    return null;
  }
}

// src/validateFrameMessage.ts
import { Message } from "@farcaster/core";
async function validateFrameMessage(body, options) {
  const optionsOrDefaults = {
    hubHttpUrl: options?.hubHttpUrl || "https://nemes.farcaster.xyz:2281"
  };
  const validateMessageResponse = await fetch(
    `${optionsOrDefaults.hubHttpUrl}/v1/validateMessage`,
    {
      method: "POST",
      headers: {
        "Content-Type": "application/octet-stream"
      },
      body: hexStringToUint8Array(body.trustedData.messageBytes)
    }
  );
  const validateMessageJson = await validateMessageResponse.json();
  if (!validateMessageJson.valid) {
    return {
      isValid: false,
      message: void 0
    };
  } else {
    return {
      isValid: true,
      message: Message.fromJSON(
        validateMessageJson.message
      )
    };
  }
}

// src/getFrameMessage.ts
import { Message as Message2 } from "@farcaster/core";
async function getFrameMessage(payload, options) {
  const optionsOrDefaults = {
    fetchHubContext: options?.fetchHubContext ?? true,
    hubHttpUrl: options?.hubHttpUrl || "https://nemes.farcaster.xyz:2281"
  };
  const decodedMessage = Message2.decode(
    Buffer.from(payload.trustedData.messageBytes, "hex")
  );
  const { buttonIndex, inputText: inputTextBytes } = decodedMessage.data.frameActionBody || {};
  const inputText = inputTextBytes ? Buffer.from(inputTextBytes).toString("utf-8") : void 0;
  const requesterFid = decodedMessage.data.fid;
  const castId = decodedMessage.data.frameActionBody.castId ? normalizeCastId(decodedMessage.data.frameActionBody.castId) : void 0;
  const parsedData = {
    buttonIndex,
    castId,
    inputText,
    requesterFid
  };
  if (optionsOrDefaults?.fetchHubContext) {
    const [
      validationResult,
      requesterFollowsCaster,
      casterFollowsRequester,
      likedCast,
      recastedCast,
      requesterVerifiedAddresses,
      requesterUserData
    ] = await Promise.all([
      validateFrameMessage(payload, {
        hubHttpUrl: optionsOrDefaults.hubHttpUrl
      }),
      fetch(
        `${optionsOrDefaults.hubHttpUrl}/v1/linkById?fid=${requesterFid}&target_fid=${castId?.fid}&link_type=follow`
      ).then((res) => res.ok || requesterFid === castId?.fid),
      fetch(
        `${optionsOrDefaults.hubHttpUrl}/v1/linkById?fid=${castId?.fid}&target_fid=${requesterFid}&link_type=follow`
      ).then((res) => res.ok || requesterFid === castId?.fid),
      fetch(
        `${optionsOrDefaults.hubHttpUrl}/v1/reactionById?fid=${requesterFid}&reaction_type=1&target_fid=${castId?.fid}&target_hash=${castId?.hash}`
      ).then((res) => res.ok),
      fetch(
        `${optionsOrDefaults.hubHttpUrl}/v1/reactionById?fid=${requesterFid}&reaction_type=2&target_fid=${castId?.fid}&target_hash=${castId?.hash}`
      ).then((res) => res.ok),
      getAddressForFid({
        fid: requesterFid,
        options: {
          hubHttpUrl: optionsOrDefaults.hubHttpUrl
        }
      }),
      getUserDataForFid({
        fid: requesterFid,
        options: {
          hubHttpUrl: optionsOrDefaults.hubHttpUrl
        }
      })
    ]);
    const hubContext = {
      isValid: validationResult.isValid,
      casterFollowsRequester,
      requesterFollowsCaster,
      likedCast,
      recastedCast,
      requesterVerifiedAddresses: requesterVerifiedAddresses ? [requesterVerifiedAddresses] : [],
      requesterUserData
    };
    return { ...parsedData, ...hubContext };
  } else {
    return parsedData;
  }
}

// src/getTokenUrl.ts
function getTokenUrl({
  address,
  tokenId,
  chainNamespace = "eip155",
  chain: chainArg,
  chainId: chainIdArg
}) {
  let chainId = null;
  if (chainIdArg) {
    chainId = chainIdArg.toString();
  } else if (chainArg) {
    chainId = chainArg.id.toString();
  }
  if (!chainId) {
    throw new Error("Invalid chainName or chain object");
  }
  return `${chainNamespace ? `${chainNamespace}:` : ""}${chainId}:${address}${tokenId ? `:${tokenId}` : ""}`;
}

// src/getTokenFromUrl.ts
function getTokenFromUrl(url) {
  const [namespace, chainId, address, tokenId] = url.split(":");
  if (!namespace || !chainId || !address) {
    throw new Error("Invalid token URL");
  }
  return {
    namespace,
    chainId: parseInt(chainId),
    address,
    tokenId: tokenId || void 0
  };
}

// src/validateFrame.ts
function validateFrame({
  htmlString,
  url
}) {
  const $ = cheerio.load(htmlString);
  let errors = null;
  function addError({ key, message }) {
    if (!errors)
      errors = {};
    if (errors.hasOwnProperty(key) && errors[key] && Array.isArray(errors[key])) {
      console.log(`Error: ${key} ${message}`);
      errors[key].push(message);
    } else {
      errors[key] = [message];
    }
  }
  const version = $("meta[property='fc:frame'], meta[name='fc:frame']").attr(
    "content"
  );
  const image = $(
    "meta[property='fc:frame:image'], meta[name='fc:frame:image']"
  ).attr("content");
  const postUrl = $(
    "meta[property='fc:frame:post_url'], meta[name='fc:frame:post_url']"
  ).attr("content") || url;
  const inputText = $(
    "meta[property='fc:frame:input:text'], meta[name='fc:frame:input:text']"
  ).attr("content");
  const buttonLabels = [1, 2, 3, 4].flatMap(
    (el) => $(
      `meta[property^='fc:frame:button:${el}'], meta[name='fc:frame:button:${el}']`
    ).map((i, elem) => parseButtonElement2(elem)).filter((i, elem) => elem !== null).toArray()
  );
  const buttonActions = [1, 2, 3, 4].flatMap(
    (el) => $(
      `meta[property^='fc:frame:button:${el}:action'], meta[name='fc:frame:button:${el}:action']`
    ).map((i, elem) => parseButtonElement2(elem)).filter((i, elem) => elem !== null).toArray()
  );
  const buttonTargets = [1, 2, 3, 4].flatMap(
    (el) => $(
      `meta[property^='fc:frame:button:${el}:target'], meta[name='fc:frame:button:${el}:target']`
    ).map((i, elem) => parseButtonElement2(elem)).filter((i, elem) => elem !== null).toArray()
  );
  let buttonsValidation = [false, false, false, false];
  const buttonsWithActions = buttonLabels.map((buttonLabel) => {
    const buttonAction = buttonActions.find(
      (action2) => action2?.buttonIndex === buttonLabel?.buttonIndex
    );
    const buttonTarget = buttonTargets.find(
      (action2) => action2?.buttonIndex === buttonLabel?.buttonIndex
    );
    if (buttonsValidation[buttonLabel.buttonIndex - 1]) {
      addError({
        message: "Duplicate button",
        key: `fc:frame:button:${buttonLabel.buttonIndex}`
      });
    }
    if (![1, 2, 3, 4].includes(buttonLabel.buttonIndex)) {
      addError({
        message: "Incorrect button index (outside of 1,2,3,4)",
        key: `fc:frame:button:${buttonLabel.buttonIndex}`
      });
    } else {
      buttonsValidation[buttonLabel.buttonIndex - 1] = true;
    }
    const action = buttonAction?.content !== void 0 ? buttonAction?.content : "post";
    if (action === "link") {
      if (!buttonTarget?.content) {
        addError({
          message: "No button target, but required for action type link",
          key: `fc:frame:button:${buttonLabel.buttonIndex}`
        });
      }
      if (!(buttonTarget?.content?.startsWith("http://") || buttonTarget?.content?.startsWith("https://"))) {
        addError({
          message: "External links MUST use the https://  or http:// protocols. ",
          key: `fc:frame:button:${buttonLabel.buttonIndex}`
        });
      }
    }
    if (!buttonTarget?.content && ["link", "mint"].includes(action)) {
      addError({
        message: `Button target is required for action type ${action}`,
        key: `fc:frame:button:${buttonLabel.buttonIndex}`
      });
    }
    if (buttonTarget?.content && !buttonAction) {
      addError({
        message: "Missing button action (should be 'mint' or 'link')",
        key: `fc:frame:button:${buttonLabel.buttonIndex}`
      });
    }
    if (!["post_redirect", "post", "mint", "link", void 0].includes(
      buttonAction?.content
    )) {
      addError({
        message: "Invalid button action specified",
        key: `fc:frame:button:${buttonLabel.buttonIndex}`
      });
    }
    if (action === "mint" && buttonTarget?.content) {
      try {
        getTokenFromUrl(buttonTarget.content);
      } catch (error) {
        addError({
          message: "Invalid CAIP-10 URL",
          key: `fc:frame:button:${buttonLabel.buttonIndex}`
        });
      }
    }
    return {
      buttonIndex: buttonLabel.buttonIndex,
      label: buttonLabel.content || "",
      target: buttonTarget?.content,
      // this is an optional property, falls back to "post"
      action: buttonAction?.content || "post"
    };
  }).sort((a, b) => a.buttonIndex - b.buttonIndex).map((button) => {
    if (isFrameButtonLink(button) || isFrameButtonMint(button))
      return {
        label: button.label,
        action: button.action,
        target: button.target
      };
    return {
      label: button.label,
      action: button.action,
      target: button.target
    };
  });
  if (buttonsValidation.some((x, i) => !x && i < 3 && buttonsValidation[i + 1])) {
    addError({
      message: `Gap in buttons sequence, ${buttonsValidation.map((el, i) => `${el ? i + 1 : ""}`).join(",")}`,
      key: `fc:frame:button:1`
    });
  }
  if (!version) {
    addError({ message: "No version found in frame", key: "fc:frame" });
  } else if (!isValidVersion(version))
    addError({
      message: "Invalid version",
      key: "fc:frame"
    });
  if (!image) {
    addError({ message: "No image found in frame", key: "fc:frame:image" });
  }
  if (!postUrl) {
    addError({
      message: "No post_url in frame",
      key: "fc:frame:post_url"
    });
  }
  if (getByteLength(postUrl) > 256) {
    addError({
      message: "post_url is more than 256 bytes (frames.js generates a longer post_url including system params)",
      key: "fc:frame:post_url"
    });
  }
  if (buttonsWithActions.length > 4)
    addError({ message: "Too many buttons", key: "fc:frame:button" });
  if (inputText && getByteLength(inputText) > 32) {
    addError({
      message: "Input text should be max 32 bytes",
      key: "fc:frame:input:text"
    });
  }
  if (!(image?.startsWith("http://") || image?.startsWith("https://"))) {
    if (!(image?.startsWith("data:image/png;base64,") || image?.startsWith("data:image/jpg;base64,") || image?.startsWith("data:image/jpeg;base64,") || image?.startsWith("data:image/gif;base64,"))) {
      addError({
        message: "Image has an unrecognized format. Only jpg, png and gif images are supported",
        key: "fc:frame:image"
      });
    }
  }
  return {
    frame: {
      version,
      image,
      buttons: buttonsWithActions,
      postUrl,
      inputText
    },
    errors
  };
}
function parseButtonElement2(elem) {
  const nameAttr = elem.attribs["name"] || elem.attribs["property"];
  const buttonIndex = nameAttr?.split(":")[3];
  try {
    return {
      buttonIndex: parseInt(buttonIndex || ""),
      content: elem.attribs["content"]
    };
  } catch (error) {
    return null;
  }
}

export {
  validateFrame,
  parseButtonElement2 as parseButtonElement,
  getFrame,
  parseButtonElement as parseButtonElement2,
  validateFrameMessage,
  getFrameMessage,
  getTokenUrl,
  getTokenFromUrl
};
